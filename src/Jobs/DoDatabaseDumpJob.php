<?php

namespace MediaWiki\Extensions\DumpsOnDemand\Jobs;

use GenericParameterJob;
use Job;
use MediaWiki\Extensions\DumpsOnDemand\Backend\FileBackend;
use MediaWiki\MediaWikiServices;
use WikiExporter;
use Wikimedia\Rdbms\ILBFactory;
use const DB_REPLICA;

/**
 * Job that creates database dumps.
 *
 * The following job parameters are required:
 *   - fullHistory: Indicates if this job should dump the full history
 *
 * The dumps generated by this job are equivalent to calling dumpBackup.php --full --uploads
 * and dumpBackup.php --current --uploads
 */
class DoDatabaseDumpJob extends Job implements GenericParameterJob {
	public const JOB_NAME = 'DatabaseDumpGeneration';

	/**
	 * @var ILBFactory
	 */
	private $lbFactory;

	/**
	 * @var FileBackend
	 */
	private $fileBackend;

	/**
	 * @param array $params
	 */
	public function __construct( array $params ) {
		parent::__construct( self::JOB_NAME, $params );

		$this->lbFactory = MediaWikiServices::getInstance()->getDBLoadBalancerFactory();
		$this->fileBackend = MediaWikiServices::getInstance()->getService( 'DumpsOnDemandFileBackend' );
	}

	/**
	 * @inheritDoc
	 * @return bool
	 */
	public function run(): bool {
		$dbr = $this->lbFactory->newMainLB()->getMaintenanceConnectionRef( DB_REPLICA, 'dump' );
		$dbr->setSessionOptions( [ 'connTimeout' => 3600 ] );

		if ( $this->params['fullHistory'] ) {
			$file = $this->fileBackend->getAllRevisionsFilePath();
		} else {
			$file = $this->fileBackend->getCurrentRevisionsFilePath();
		}

		$exporter = new WikiExporter(
			$dbr,
			$this->params['fullHistory'] ? WikiExporter::FULL : WikiExporter::CURRENT
		);
		$exporter->dumpUploads = true;
		$sink = $this->fileBackend->getOutputSink( $file );
		// Pass as variable because the argument is defined as a reference.
		$exporter->setOutputSink( $sink );

		$exporter->openStream();
		$exporter->allPages();
		$exporter->closeStream();

		return true;
	}
}
